/// <reference lib="deno.ns" />
import {assertEquals, assertNotEquals, assertObjectMatch} from 'https://deno.land/std@0.186.0/testing/asserts.ts'
import { beforeAll, afterAll } from "https://deno.land/std@0.158.0/testing/bdd.ts";

import {fetchomatic} from '../../src/fetchomatic/index.ts'

// todo: this relies on the jest tests running!

beforeAll(async () => {
  console.log('beforeAllll')
})

Deno.test('timeout', async () => {
  const one = await fetch('https://postman-echo.com/get?a=b')
  assertObjectMatch(await one.json(), {args: {a: 'b'}})

  await new Promise(r => setTimeout(r, 10))

  const two = await fetch('https://postman-echo.com/get?a=c')
  assertObjectMatch(await two.json(), {args: {a: 'c'}})
})

Deno.test('url test', async () => {
  const map = new Map<string, string>()
  //   const log = jest.fn()
  const logs: string[] = []
  const log = (msg: string) => void logs.push(msg)

  const client = fetchomatic(fetch)
    .withBeforeRequest(({parsed}) => log('before raw fetch: ' + parsed.headers.label))
    .withCache({
      keyv: map,
    })
    .withBeforeRequest(({parsed}) => log('before cached fetch: ' + parsed.headers.label))
    .client({baseUrl: 'http://localhost:7001'})

  const one = await client.get.text('/get', {headers: {label: 'first'}})
  const two = await client.get.text('/get', {headers: {label: 'second'}})

  assertEquals(logs.slice().slice(), [
    'before cached fetch: first',
    'before raw fetch: first',
    'before cached fetch: second',
  ])
  assertEquals(two.data, one.data)
  assertNotEquals(two.headers, one.headers)
  assertEquals(two.status, one.status)
  assertEquals(
    {
      ...two.headers,
      'keep-alive': one.headers['keep-alive'],
      connection: one.headers.connection,
    },
    {
      ...one.headers,
      date: two.headers.date,
      age: two.headers.age,
    },
  )
  //   assertEquals(Object.fromEntries(map.entries()), {
  //     'keyv:http://localhost:7001/get': expect.stringMatching(/{.*policy.*,.*response.*}/),
  //   })
})
